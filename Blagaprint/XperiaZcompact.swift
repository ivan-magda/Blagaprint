//
//  XperiaZcompac.swift
//  Blagaprint
//
//  Created by Ivan Magda on 31.10.15.
//  Copyright (c) 2015 Blagaprint. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

class XperiaZcompact : NSObject {

    //// Cache

    struct Cache {
        static var outerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor().colorWithAlphaComponent(0.7), offset: CGSizeMake(-6.1, 8.1), blurRadius: 15)
        static var innerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor(), offset: CGSizeMake(1.1, -2.1), blurRadius: 4)
    }

    //// Shadows

    class var outerShadow: NSShadow { return Cache.outerShadow }
    class var innerShadow: NSShadow { return Cache.innerShadow }

    //// Drawing Methods

    class func drawXperiaZcompact(frame: CGRect, colorOfText: UIColor, fillColor: UIColor, image: UIImage, textRectHeight: CGFloat, backgroundImageVisible: Bool, textYscale: CGFloat, caseText: String, textXscale: CGFloat, var textSize: CGFloat, device: Device) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)
        var fillColorRedComponent: CGFloat = 1,
            fillColorGreenComponent: CGFloat = 1,
            fillColorBlueComponent: CGFloat = 1
        fillColor.getRed(&fillColorRedComponent, green: &fillColorGreenComponent, blue: &fillColorBlueComponent, alpha: nil)

        let cameraStrokeColor = UIColor(red: (fillColorRedComponent * 0.75), green: (fillColorGreenComponent * 0.75), blue: (fillColorBlueComponent * 0.75), alpha: (CGColorGetAlpha(fillColor.CGColor) * 0.75 + 0.25))

        //// Shadow Declarations
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)

        //// Image Declarations
        let xperiaZcompactCameraImage: UIImage?
        if device.name == Device.sonyXperiaZ1Compact().name {
            xperiaZcompactCameraImage = UIImage(named: "xperiaZ1compactCameraImage.png")
        } else if device.name == Device.sonyXperiaZ2Compact().name {
            xperiaZcompactCameraImage = UIImage(named: "xperiaZ2compactCameraImage.png")
        } else {
            xperiaZcompactCameraImage = UIImage(named: "xperiaZ3compactCameraImage.png")
        }

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 124.5, frame.minY + 221.5)

        let rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-83.57, -201))
        rectanglePath.addCurveToPoint(CGPointMake(-105, -177.48), controlPoint1: CGPointMake(-101.57, -201), controlPoint2: CGPointMake(-105, -177.48))
        rectanglePath.addLineToPoint(CGPointMake(-105, -150.6))
        rectanglePath.addLineToPoint(CGPointMake(-105, 67.8))
        rectanglePath.addLineToPoint(CGPointMake(-105, 101.4))
        rectanglePath.addCurveToPoint(CGPointMake(-83.57, 135), controlPoint1: CGPointMake(-105, 101.4), controlPoint2: CGPointMake(-105, 135))
        rectanglePath.addCurveToPoint(CGPointMake(-32.14, 135), controlPoint1: CGPointMake(-39.68, 135), controlPoint2: CGPointMake(-38.47, 135))
        rectanglePath.addCurveToPoint(CGPointMake(19.29, 135), controlPoint1: CGPointMake(-22.8, 135), controlPoint2: CGPointMake(-3.92, 135))
        rectanglePath.addCurveToPoint(CGPointMake(53.57, 135), controlPoint1: CGPointMake(26.35, 135), controlPoint2: CGPointMake(18.03, 135))
        rectanglePath.addCurveToPoint(CGPointMake(75, 101.4), controlPoint1: CGPointMake(72.43, 135), controlPoint2: CGPointMake(75, 101.4))
        rectanglePath.addLineToPoint(CGPointMake(75, 67.8))
        rectanglePath.addCurveToPoint(CGPointMake(75, -150.6), controlPoint1: CGPointMake(75, 67.8), controlPoint2: CGPointMake(75, -139.8))
        rectanglePath.addCurveToPoint(CGPointMake(75, -177.48), controlPoint1: CGPointMake(75, -151.25), controlPoint2: CGPointMake(75, -177.48))
        rectanglePath.addCurveToPoint(CGPointMake(53.57, -201), controlPoint1: CGPointMake(75, -177.48), controlPoint2: CGPointMake(71.57, -201))
        rectanglePath.addCurveToPoint(CGPointMake(19.29, -201), controlPoint1: CGPointMake(40.42, -201), controlPoint2: CGPointMake(23.54, -201))
        rectanglePath.addCurveToPoint(CGPointMake(-32.14, -201), controlPoint1: CGPointMake(8.34, -201), controlPoint2: CGPointMake(-28.32, -201))
        rectanglePath.addCurveToPoint(CGPointMake(-83.57, -201), controlPoint1: CGPointMake(-38.73, -201), controlPoint2: CGPointMake(-40.97, -201))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, XperiaZcompact.outerShadow.shadowOffset, XperiaZcompact.outerShadow.shadowBlurRadius, XperiaZcompact.outerShadow.shadowColor!.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(XperiaZcompact.innerShadow.shadowColor!.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = XperiaZcompact.innerShadow.shadowColor!.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, XperiaZcompact.innerShadow.shadowOffset, XperiaZcompact.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 124.5, frame.minY + 221.5)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-105, -201, 180, 336)
            let backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-83.57, -201))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-105, -177.48), controlPoint1: CGPointMake(-101.57, -201), controlPoint2: CGPointMake(-105, -177.48))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-105, -150.6))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-105, 67.8))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-105, 101.4))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-83.57, 135), controlPoint1: CGPointMake(-105, 101.4), controlPoint2: CGPointMake(-105, 135))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-32.14, 135), controlPoint1: CGPointMake(-39.68, 135), controlPoint2: CGPointMake(-38.47, 135))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(19.29, 135), controlPoint1: CGPointMake(-22.8, 135), controlPoint2: CGPointMake(-3.92, 135))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.57, 135), controlPoint1: CGPointMake(26.35, 135), controlPoint2: CGPointMake(18.03, 135))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(75, 101.4), controlPoint1: CGPointMake(72.43, 135), controlPoint2: CGPointMake(75, 101.4))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(75, 67.8))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(75, -150.6), controlPoint1: CGPointMake(75, 67.8), controlPoint2: CGPointMake(75, -139.8))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(75, -177.48), controlPoint1: CGPointMake(75, -151.25), controlPoint2: CGPointMake(75, -177.48))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.57, -201), controlPoint1: CGPointMake(75, -177.48), controlPoint2: CGPointMake(71.57, -201))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(19.29, -201), controlPoint1: CGPointMake(40.42, -201), controlPoint2: CGPointMake(23.54, -201))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-32.14, -201), controlPoint1: CGPointMake(8.34, -201), controlPoint2: CGPointMake(-28.32, -201))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-83.57, -201), controlPoint1: CGPointMake(-38.73, -201), controlPoint2: CGPointMake(-40.97, -201))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, XperiaZcompact.outerShadow.shadowOffset, XperiaZcompact.outerShadow.shadowBlurRadius, XperiaZcompact.outerShadow.shadowColor!.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(XperiaZcompact.innerShadow.shadowColor!.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = XperiaZcompact.innerShadow.shadowColor!.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, XperiaZcompact.innerShadow.shadowOffset, XperiaZcompact.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, .SourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 18, frame.minY + 81)
        CGContextRotateCTM(context, CGFloat(90 * M_PI / 180))
        CGContextScaleCTM(context, textXscale, textYscale)
        
        let textRect: CGRect = CGRectMake(0, -textRectHeight, 240, textRectHeight)
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;
        
        // Calculate font size
        let fontSizeThatFitsRect = CaseView.fontSizeThatFitsRect(textRect, withText: caseText, maxFontSize: 200.0, minFontSize: 44.0)
        if fontSizeThatFitsRect != textSize && fontSizeThatFitsRect > textSize {
            let adjustedFontSize: CGFloat = round(fontSizeThatFitsRect - textSize)
            textSize += adjustedFontSize
        }
        
        print("Text size = \(textSize)")
        
        let textFontAttributes = [NSFontAttributeName: AppAppearance.andersonSupercarFontWithSize(textSize), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]
        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 40, frame.minY + 41.67, 60, 36)
        let cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 71.22, frame.minY + 45.86))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 75.88, frame.minY + 45.95), controlPoint1: CGPointMake(frame.minX + 72.79, frame.minY + 45.88), controlPoint2: CGPointMake(frame.minX + 74.35, frame.minY + 45.91))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 89.15, frame.minY + 45.95), controlPoint1: CGPointMake(frame.minX + 81.13, frame.minY + 46.09), controlPoint2: CGPointMake(frame.minX + 85.08, frame.minY + 45.95))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 89.15, frame.minY + 73.66), controlPoint1: CGPointMake(frame.minX + 102.67, frame.minY + 45.95), controlPoint2: CGPointMake(frame.minX + 104.54, frame.minY + 73.66))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 75.88, frame.minY + 73.66), controlPoint1: CGPointMake(frame.minX + 84.44, frame.minY + 73.66), controlPoint2: CGPointMake(frame.minX + 81.23, frame.minY + 73.54))
        cameraPath.addLineToPoint(CGPointMake(frame.minX + 71.21, frame.minY + 73.73))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 44.61, frame.minY + 73.8), controlPoint1: CGPointMake(frame.minX + 64.05, frame.minY + 75.79), controlPoint2: CGPointMake(frame.minX + 50.68, frame.minY + 81.42))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 44.61, frame.minY + 45.81), controlPoint1: CGPointMake(frame.minX + 38.46, frame.minY + 66.07), controlPoint2: CGPointMake(frame.minX + 38.46, frame.minY + 53.54))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 71.22, frame.minY + 45.86), controlPoint1: CGPointMake(frame.minX + 50.7, frame.minY + 38.17), controlPoint2: CGPointMake(frame.minX + 62.58, frame.minY + 42.88))
        cameraPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor!.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        CGContextScaleCTM(context, 1, -1)
        
        if xperiaZcompactCameraImage != nil {
            CGContextDrawTiledImage(context, CGRectMake(cameraRect.minX - (device.name == Device.sonyXperiaZ2Compact().name ? 3 : 4), -cameraRect.minY, xperiaZcompactCameraImage!.size.width, xperiaZcompactCameraImage!.size.height), xperiaZcompactCameraImage!.CGImage)
        }
        
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor!.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor!.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        cameraStrokeColor.setStroke()
        cameraPath.lineWidth = 1
        cameraPath.stroke()
    }

    //// Generated Images

    class func imageOfXperiaZcompact(frame: CGRect, colorOfText: UIColor, fillColor: UIColor, image: UIImage, textRectHeight: CGFloat, backgroundImageVisible: Bool, textYscale: CGFloat, caseText: String, textXscale: CGFloat, textSize: CGFloat, device: Device) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        XperiaZcompact.drawXperiaZcompact(frame, colorOfText: colorOfText, fillColor: fillColor, image: image, textRectHeight: textRectHeight, backgroundImageVisible: backgroundImageVisible, textYscale: textYscale, caseText: caseText, textXscale: textXscale, textSize: textSize, device: device)
        let imageOfXperiaZcompact = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfXperiaZcompact!
    }

}

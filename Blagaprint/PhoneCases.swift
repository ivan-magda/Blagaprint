//
//  PhoneCases.swift
//  PhoneCases
//
//  Created by Ivan Magda on 11.10.15.
//  Copyright (c) 2015 Blagaprint. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

class PhoneCases : NSObject {

    //// Cache

    struct Cache {
        static var innerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor(), offset: CGSizeMake(1.1, -2.1), blurRadius: 4)
        static var outerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor().colorWithAlphaComponent(0.7), offset: CGSizeMake(-6.1, 8.1), blurRadius: 15)
    }

    //// Shadows

    class var innerShadow: NSShadow { return Cache.innerShadow }
    class var outerShadow: NSShadow { return Cache.outerShadow }

    //// Drawing Methods

    class func drawIPhoneCase(frame: CGRect, fillColor: UIColor) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(frame.minX + 29.73, frame.minY + 31))
        rectanglePath.addCurveToPoint(CGPointMake(frame.minX + 20.6, frame.minY + 60), controlPoint1: CGPointMake(frame.minX + 18.86, frame.minY + 45.55), controlPoint2: CGPointMake(frame.minX + 20.6, frame.minY + 60))
        rectanglePath.addLineToPoint(CGPointMake(frame.minX + 20.6, frame.maxY - 60))
        rectanglePath.addCurveToPoint(CGPointMake(frame.minX + 29.73, frame.minY + 367), controlPoint1: CGPointMake(frame.minX + 20.6, frame.maxY - 60), controlPoint2: CGPointMake(frame.minX + 21.38, frame.minY + 355.05))
        rectanglePath.addCurveToPoint(CGPointMake(frame.minX + 54.39, frame.maxY - 18), controlPoint1: CGPointMake(frame.minX + 35.62, frame.minY + 375.43), controlPoint2: CGPointMake(frame.minX + 48.1, frame.maxY - 18))
        rectanglePath.addCurveToPoint(CGPointMake(frame.maxX - 57.03, frame.maxY - 18), controlPoint1: CGPointMake(frame.minX + 63.68, frame.maxY - 18), controlPoint2: CGPointMake(frame.maxX - 80.1, frame.maxY - 18))
        rectanglePath.addCurveToPoint(CGPointMake(frame.minX + 189.54, frame.minY + 367), controlPoint1: CGPointMake(frame.maxX - 50, frame.maxY - 18), controlPoint2: CGPointMake(frame.minX + 182.5, frame.minY + 376.42))
        rectanglePath.addCurveToPoint(CGPointMake(frame.maxX - 20.5, frame.maxY - 60), controlPoint1: CGPointMake(frame.minX + 197.76, frame.minY + 356), controlPoint2: CGPointMake(frame.maxX - 20.5, frame.maxY - 60))
        rectanglePath.addCurveToPoint(CGPointMake(frame.maxX - 20.5, frame.minY + 60), controlPoint1: CGPointMake(frame.maxX - 20.5, frame.maxY - 60), controlPoint2: CGPointMake(frame.maxX - 20.5, frame.minY + 71.5))
        rectanglePath.addCurveToPoint(CGPointMake(frame.minX + 189.54, frame.minY + 31), controlPoint1: CGPointMake(frame.maxX - 20.5, frame.minY + 58.99), controlPoint2: CGPointMake(frame.minX + 200.5, frame.minY + 46))
        rectanglePath.addCurveToPoint(CGPointMake(frame.maxX - 57.03, frame.minY + 20), controlPoint1: CGPointMake(frame.minX + 181.82, frame.minY + 20.43), controlPoint2: CGPointMake(frame.maxX - 50.74, frame.minY + 20))
        rectanglePath.addCurveToPoint(CGPointMake(frame.minX + 54.39, frame.minY + 20), controlPoint1: CGPointMake(frame.maxX - 67.92, frame.minY + 20), controlPoint2: CGPointMake(frame.minX + 58.2, frame.minY + 20))
        rectanglePath.addCurveToPoint(CGPointMake(frame.minX + 29.73, frame.minY + 31), controlPoint1: CGPointMake(frame.minX + 47.84, frame.minY + 20), controlPoint2: CGPointMake(frame.minX + 37.95, frame.minY + 20))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCases.outerShadow.shadowOffset, PhoneCases.outerShadow.shadowBlurRadius, PhoneCases.outerShadow.shadowColor!.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCases.innerShadow.shadowColor!.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCases.innerShadow.shadowColor!.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCases.innerShadow.shadowOffset, PhoneCases.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, CGBlendMode.SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()
    }

    //// Generated Images

    class func imageOfIPhoneCase(frame: CGRect, fillColor: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 480), false, 0)
        PhoneCases.drawIPhoneCase(frame, fillColor: fillColor)
        let imageOfIPhoneCase = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfIPhoneCase!
    }

}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}

@objc protocol StyleKitSettableImage {
    var image: UIImage! { get set }
}

@objc protocol StyleKitSettableSelectedImage {
    var selectedImage: UIImage! { get set }
}

//
//  PhoneCase.swift
//  PhoneCases
//
//  Created by Ivan Magda on 18.10.15.
//  Copyright (c) 2015 Blagaprint. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

class PhoneCase : NSObject {

    //// Cache

    struct Cache {
        static var innerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor(), offset: CGSizeMake(1.1, -2.1), blurRadius: 4)
        static var outerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor().colorWithAlphaComponent(0.7), offset: CGSizeMake(-6.1, 8.1), blurRadius: 15)
    }

    //// Shadows

    class var innerShadow: NSShadow { return Cache.innerShadow }
    class var outerShadow: NSShadow { return Cache.outerShadow }

    //// Drawing Methods

    class func drawIPhoneCase(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 197.14)

        let rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-80.28, -166.14))
        rectanglePath.addCurveToPoint(CGPointMake(-89.41, -137.14), controlPoint1: CGPointMake(-91.15, -151.59), controlPoint2: CGPointMake(-89.41, -137.14))
        rectanglePath.addLineToPoint(CGPointMake(-89.41, 134.86))
        rectanglePath.addCurveToPoint(CGPointMake(-80.28, 169.86), controlPoint1: CGPointMake(-89.41, 134.86), controlPoint2: CGPointMake(-88.63, 157.91))
        rectanglePath.addCurveToPoint(CGPointMake(-55.62, 176.86), controlPoint1: CGPointMake(-74.39, 178.29), controlPoint2: CGPointMake(-61.92, 176.86))
        rectanglePath.addCurveToPoint(CGPointMake(52.96, 176.86), controlPoint1: CGPointMake(-46.33, 176.86), controlPoint2: CGPointMake(29.89, 176.86))
        rectanglePath.addCurveToPoint(CGPointMake(79.53, 169.86), controlPoint1: CGPointMake(59.98, 176.86), controlPoint2: CGPointMake(72.49, 179.28))
        rectanglePath.addCurveToPoint(CGPointMake(89.49, 134.36), controlPoint1: CGPointMake(87.75, 158.86), controlPoint2: CGPointMake(89.49, 134.36))
        rectanglePath.addCurveToPoint(CGPointMake(89.49, -137.14), controlPoint1: CGPointMake(89.49, 134.36), controlPoint2: CGPointMake(89.49, -125.64))
        rectanglePath.addCurveToPoint(CGPointMake(79.53, -166.14), controlPoint1: CGPointMake(89.49, -138.15), controlPoint2: CGPointMake(90.49, -151.14))
        rectanglePath.addCurveToPoint(CGPointMake(52.96, -177.14), controlPoint1: CGPointMake(71.81, -176.71), controlPoint2: CGPointMake(59.25, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-55.62, -177.14), controlPoint1: CGPointMake(42.07, -177.14), controlPoint2: CGPointMake(-51.82, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-80.28, -166.14), controlPoint1: CGPointMake(-62.17, -177.14), controlPoint2: CGPointMake(-72.06, -177.14))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor!.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor!.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor!.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 197.14)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-89.51, -177.14, 179.02, 354.28)
            let backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-80.28, -166.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-89.41, -137.14), controlPoint1: CGPointMake(-91.15, -151.59), controlPoint2: CGPointMake(-89.41, -137.14))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-89.41, 134.86))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.28, 169.86), controlPoint1: CGPointMake(-89.41, 134.86), controlPoint2: CGPointMake(-88.63, 157.91))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.62, 176.86), controlPoint1: CGPointMake(-74.39, 178.29), controlPoint2: CGPointMake(-61.92, 176.86))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(52.96, 176.86), controlPoint1: CGPointMake(-46.33, 176.86), controlPoint2: CGPointMake(29.89, 176.86))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(79.53, 169.86), controlPoint1: CGPointMake(59.98, 176.86), controlPoint2: CGPointMake(72.49, 179.28))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(89.49, 134.36), controlPoint1: CGPointMake(87.75, 158.86), controlPoint2: CGPointMake(89.49, 134.36))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(89.49, -137.14), controlPoint1: CGPointMake(89.49, 134.36), controlPoint2: CGPointMake(89.49, -125.64))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(79.53, -166.14), controlPoint1: CGPointMake(89.49, -138.15), controlPoint2: CGPointMake(90.49, -151.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(52.96, -177.14), controlPoint1: CGPointMake(71.81, -176.71), controlPoint2: CGPointMake(59.25, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.62, -177.14), controlPoint1: CGPointMake(42.07, -177.14), controlPoint2: CGPointMake(-51.82, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.28, -166.14), controlPoint1: CGPointMake(-62.17, -177.14), controlPoint2: CGPointMake(-72.06, -177.14))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor!.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            CGContextScaleCTM(context, 1, -1)
            CGContextDrawTiledImage(context, CGRectMake(backgroundImageRectangleRect.minX, -backgroundImageRectangleRect.minY, image.size.width, image.size.height), image.CGImage)
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor!.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor!.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, .SourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 113.07, frame.minY + 200)
        CGContextRotateCTM(context, CGFloat(-270 * M_PI / 180))
        CGContextScaleCTM(context, 1, 4.5)

        let textRect: CGRect = CGRectMake(-140, -23.76, 280, 48.89)
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: 44)!, NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)
    }

    //// Generated Images

    class func imageOfIPhoneCase(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawIPhoneCase(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible)
        let imageOfIPhoneCase = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfIPhoneCase!
    }

}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}

@objc protocol StyleKitSettableImage {
    var image: UIImage! { get set }
}

@objc protocol StyleKitSettableSelectedImage {
    var selectedImage: UIImage! { get set }
}

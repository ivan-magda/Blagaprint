//
//  PhoneCase.swift
//  Blagaprint
//
//  Created by Ivan Magda on 22.10.15.
//  Copyright (c) 2015 Blagaprint. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

class PhoneCase : NSObject {
    
    //// Cache
    
    struct Cache {
        static var innerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor(), offset: CGSizeMake(1.1, -2.1), blurRadius: 4)
        static var outerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor().colorWithAlphaComponent(0.7), offset: CGSizeMake(-6.1, 8.1), blurRadius: 15)
    }
    
    //// Shadows
    
    class var innerShadow: NSShadow { return Cache.innerShadow }
    class var outerShadow: NSShadow { return Cache.outerShadow }
    
    //// Drawing Methods
    
    class func drawIPhone5Case(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()
        
        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)
        
        //// Variable Declarations
        let numberOfCharacters = caseText.characters.count
        let textRectHeight = CaseView.getTextRectHeightFromNumberOfCharacters(numberOfCharacters)
        let textYoffset = -textRectHeight
        let textYscale = CaseView.getTextYscaleFromNumberOfCharacters(numberOfCharacters)
        var textSize = CaseView.getTextFontSizeFromNumberOfCharacters(numberOfCharacters)
        
        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 196.64)
        
        let rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-80.23, -166.09))
        rectanglePath.addCurveToPoint(CGPointMake(-89.41, -136.95), controlPoint1: CGPointMake(-91.16, -151.46), controlPoint2: CGPointMake(-89.41, -136.95))
        rectanglePath.addLineToPoint(CGPointMake(-89.41, 136.37))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, 171.54), controlPoint1: CGPointMake(-89.41, 136.37), controlPoint2: CGPointMake(-88.62, 159.54))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, 178.58), controlPoint1: CGPointMake(-74.31, 180.01), controlPoint2: CGPointMake(-61.77, 178.58))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, 178.58), controlPoint1: CGPointMake(-46.1, 178.58), controlPoint2: CGPointMake(30.54, 178.58))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, 171.54), controlPoint1: CGPointMake(60.8, 178.58), controlPoint2: CGPointMake(73.37, 181.02))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, 135.87), controlPoint1: CGPointMake(88.72, 160.49), controlPoint2: CGPointMake(90.46, 135.87))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, -136.95), controlPoint1: CGPointMake(90.46, 135.87), controlPoint2: CGPointMake(90.46, -125.39))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, -166.09), controlPoint1: CGPointMake(90.46, -137.96), controlPoint2: CGPointMake(91.47, -151.01))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.7), controlPoint2: CGPointMake(60.06, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.09), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor!.CGColor)
        fillColor.setFill()
        rectanglePath.fill()
        
        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor!.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor!.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)
        
        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()
        
        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
        
        CGContextRestoreGState(context)
        
        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()
        
        CGContextRestoreGState(context)
        
        
        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 196.64)
            
            let backgroundImageRectangleRect: CGRect = CGRectMake(-89.51, -177.14, 180, 356)
            let backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-80.23, -166.09))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-89.41, -136.95), controlPoint1: CGPointMake(-91.16, -151.46), controlPoint2: CGPointMake(-89.41, -136.95))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-89.41, 136.37))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, 171.54), controlPoint1: CGPointMake(-89.41, 136.37), controlPoint2: CGPointMake(-88.62, 159.54))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, 178.58), controlPoint1: CGPointMake(-74.31, 180.01), controlPoint2: CGPointMake(-61.77, 178.58))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, 178.58), controlPoint1: CGPointMake(-46.1, 178.58), controlPoint2: CGPointMake(30.54, 178.58))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, 171.54), controlPoint1: CGPointMake(60.8, 178.58), controlPoint2: CGPointMake(73.37, 181.02))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, 135.87), controlPoint1: CGPointMake(88.72, 160.49), controlPoint2: CGPointMake(90.46, 135.87))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, -136.95), controlPoint1: CGPointMake(90.46, 135.87), controlPoint2: CGPointMake(90.46, -125.39))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, -166.09), controlPoint1: CGPointMake(90.46, -137.96), controlPoint2: CGPointMake(91.47, -151.01))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.7), controlPoint2: CGPointMake(60.06, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.09), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor!.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)
            
            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor!.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor!.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, .SourceOut)
            CGContextBeginTransparencyLayer(context, nil)
            
            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()
            
            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)
            
            CGContextRestoreGState(context)
            
            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()
            
            CGContextRestoreGState(context)
        }
        
        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 18, frame.minY + 60)
        CGContextRotateCTM(context, CGFloat(-270 * M_PI / 180))
        CGContextScaleCTM(context, 1, textYscale)
        
        let textRect: CGRect = CGRectMake(0, textYoffset, 280, textRectHeight)
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Center;
        
        // Calculate font size
        let fontSizeThatFitsRect = CaseView.fontSizeThatFitsRect(textRect, withText: caseText)
        if fontSizeThatFitsRect != textSize && fontSizeThatFitsRect > textSize {
            let adjustedFontSize: CGFloat = round(fontSizeThatFitsRect - textSize)
            textSize += adjustedFontSize
        }
        
        print("Text size = \(textSize)")
        
        let textFontAttributes = [NSFontAttributeName: AppAppearance.andersonSupercarFontWithSize(textSize), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]
        
        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);
        
        CGContextRestoreGState(context)
    }
    
    //// Generated Images
    
    class func imageOfIPhone5Case(frame: CGRect, fillColor: UIColor, colorOfText: UIColor,  image: UIImage, caseText: String, backgroundImageVisible: Bool) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawIPhone5Case(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible)
        let imageOfIPhone5Case = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return imageOfIPhone5Case!
    }
    
}

extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}

@objc protocol StyleKitSettableImage {
    var image: UIImage! { get set }
}

@objc protocol StyleKitSettableSelectedImage {
    var selectedImage: UIImage! { get set }
}

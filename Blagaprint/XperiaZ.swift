//
//  XperiaZ1.swift
//  Blagaprint
//
//  Created by Ivan Magda on 31.10.15.
//  Copyright (c) 2015 Blagaprint. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

class XperiaZ : NSObject {
    
    //// Cache
    
    struct Cache {
        static var outerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor().colorWithAlphaComponent(0.7), offset: CGSizeMake(-6.1, 8.1), blurRadius: 15)
        static var innerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor(), offset: CGSizeMake(1.1, -2.1), blurRadius: 4)
    }
    
    //// Shadows
    
    class var outerShadow: NSShadow { return Cache.outerShadow }
    class var innerShadow: NSShadow { return Cache.innerShadow }
    
    //// Drawing Methods
    
    class func drawXperiaZ1(frame: CGRect, colorOfText: UIColor, fillColor: UIColor, image: UIImage, textYscale: CGFloat, caseText: String, var textSize: CGFloat, textXscale: CGFloat, backgroundImageVisible: Bool, textRectHeight: CGFloat, device: Device) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()
        
        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)
        var fillColorRedComponent: CGFloat = 1,
        fillColorGreenComponent: CGFloat = 1,
        fillColorBlueComponent: CGFloat = 1
        fillColor.getRed(&fillColorRedComponent, green: &fillColorGreenComponent, blue: &fillColorBlueComponent, alpha: nil)
        
        let cameraStrokeColor = UIColor(red: (fillColorRedComponent * 0.75), green: (fillColorGreenComponent * 0.75), blue: (fillColorBlueComponent * 0.75), alpha: (CGColorGetAlpha(fillColor.CGColor) * 0.75 + 0.25))
        
        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)
        
        //// Image Declarations
        var xperiaCameraImage: UIImage?
        if device.name == Device.sonyXperiaZ1().name {
            xperiaCameraImage = UIImage(named: "xperiaZ1CameraImage.png")
        } else if device.name == Device.sonyXperiaZ2().name {
            xperiaCameraImage = UIImage(named: "xperiaZ2CameraImage.png")
        } else {
            xperiaCameraImage = UIImage(named: "xperiaZ3CameraImage.png")
        }
        
        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 120.5, frame.minY + 220.5)
        
        let rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-80, -201))
        rectanglePath.addCurveToPoint(CGPointMake(-105, -173.28), controlPoint1: CGPointMake(-101, -201), controlPoint2: CGPointMake(-105, -173.28))
        rectanglePath.addLineToPoint(CGPointMake(-105, -141.6))
        rectanglePath.addLineToPoint(CGPointMake(-105, 115.8))
        rectanglePath.addLineToPoint(CGPointMake(-105, 155.4))
        rectanglePath.addCurveToPoint(CGPointMake(-80, 195), controlPoint1: CGPointMake(-105, 155.4), controlPoint2: CGPointMake(-105, 195))
        rectanglePath.addCurveToPoint(CGPointMake(-20, 195), controlPoint1: CGPointMake(-28.8, 195), controlPoint2: CGPointMake(-27.38, 195))
        rectanglePath.addCurveToPoint(CGPointMake(40, 195), controlPoint1: CGPointMake(-9.1, 195), controlPoint2: CGPointMake(12.93, 195))
        rectanglePath.addCurveToPoint(CGPointMake(80, 195), controlPoint1: CGPointMake(48.24, 195), controlPoint2: CGPointMake(38.53, 195))
        rectanglePath.addCurveToPoint(CGPointMake(105, 155.4), controlPoint1: CGPointMake(102, 195), controlPoint2: CGPointMake(105, 155.4))
        rectanglePath.addLineToPoint(CGPointMake(105, 115.8))
        rectanglePath.addCurveToPoint(CGPointMake(105, -141.6), controlPoint1: CGPointMake(105, 115.8), controlPoint2: CGPointMake(105, -128.87))
        rectanglePath.addCurveToPoint(CGPointMake(105, -173.28), controlPoint1: CGPointMake(105, -142.36), controlPoint2: CGPointMake(105, -173.28))
        rectanglePath.addCurveToPoint(CGPointMake(80, -201), controlPoint1: CGPointMake(105, -173.28), controlPoint2: CGPointMake(101, -201))
        rectanglePath.addCurveToPoint(CGPointMake(40, -201), controlPoint1: CGPointMake(64.66, -201), controlPoint2: CGPointMake(44.96, -201))
        rectanglePath.addCurveToPoint(CGPointMake(-20, -201), controlPoint1: CGPointMake(27.23, -201), controlPoint2: CGPointMake(-15.54, -201))
        rectanglePath.addCurveToPoint(CGPointMake(-80, -201), controlPoint1: CGPointMake(-27.69, -201), controlPoint2: CGPointMake(-30.3, -201))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, XperiaZ.outerShadow.shadowOffset, XperiaZ.outerShadow.shadowBlurRadius, XperiaZ.outerShadow.shadowColor!.CGColor)
        fillColor.setFill()
        rectanglePath.fill()
        
        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(XperiaZ.innerShadow.shadowColor!.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = XperiaZ.innerShadow.shadowColor!.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, XperiaZ.innerShadow.shadowOffset, XperiaZ.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)
        
        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()
        
        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
        
        CGContextRestoreGState(context)
        
        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()
        
        CGContextRestoreGState(context)
        
        
        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 120.5, frame.minY + 220.5)
            
            let backgroundImageRectangleRect: CGRect = CGRectMake(-105, -201, 210, 396)
            let backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-80, -201))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-105, -173.28), controlPoint1: CGPointMake(-101, -201), controlPoint2: CGPointMake(-105, -173.28))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-105, -141.6))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-105, 115.8))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-105, 155.4))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80, 195), controlPoint1: CGPointMake(-105, 155.4), controlPoint2: CGPointMake(-105, 195))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-20, 195), controlPoint1: CGPointMake(-28.8, 195), controlPoint2: CGPointMake(-27.38, 195))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(40, 195), controlPoint1: CGPointMake(-9.1, 195), controlPoint2: CGPointMake(12.93, 195))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80, 195), controlPoint1: CGPointMake(48.24, 195), controlPoint2: CGPointMake(38.53, 195))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(105, 155.4), controlPoint1: CGPointMake(102, 195), controlPoint2: CGPointMake(105, 155.4))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(105, 115.8))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(105, -141.6), controlPoint1: CGPointMake(105, 115.8), controlPoint2: CGPointMake(105, -128.87))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(105, -173.28), controlPoint1: CGPointMake(105, -142.36), controlPoint2: CGPointMake(105, -173.28))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80, -201), controlPoint1: CGPointMake(105, -173.28), controlPoint2: CGPointMake(101, -201))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(40, -201), controlPoint1: CGPointMake(64.66, -201), controlPoint2: CGPointMake(44.96, -201))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-20, -201), controlPoint1: CGPointMake(27.23, -201), controlPoint2: CGPointMake(-15.54, -201))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80, -201), controlPoint1: CGPointMake(-27.69, -201), controlPoint2: CGPointMake(-30.3, -201))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, XperiaZ.outerShadow.shadowOffset, XperiaZ.outerShadow.shadowBlurRadius, XperiaZ.outerShadow.shadowColor!.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)
            
            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(XperiaZ.innerShadow.shadowColor!.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = XperiaZ.innerShadow.shadowColor!.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, XperiaZ.innerShadow.shadowOffset, XperiaZ.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, .SourceOut)
            CGContextBeginTransparencyLayer(context, nil)
            
            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()
            
            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)
            
            CGContextRestoreGState(context)
            
            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()
            
            CGContextRestoreGState(context)
        }
        
        
        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 16, frame.minY + 100)
        CGContextRotateCTM(context, CGFloat(90 * M_PI / 180))
        CGContextScaleCTM(context, textXscale, textYscale)
        
        let textRect: CGRect = CGRectMake(0, -textRectHeight, 280, textRectHeight)
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;
        
        // Calculate font size
        let fontSizeThatFitsRect = CaseView.fontSizeThatFitsRect(textRect, withText: caseText, maxFontSize: 225.0, minFontSize: 46.0)
        if fontSizeThatFitsRect != textSize && fontSizeThatFitsRect > textSize {
            let adjustedFontSize: CGFloat = round(fontSizeThatFitsRect - textSize)
            textSize += adjustedFontSize
        }
        
        print("Text size = \(textSize)")
        
        
        let textFontAttributes = [NSFontAttributeName: AppAppearance.andersonSupercarFontWithSize(textSize), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]
        
        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);
        
        CGContextRestoreGState(context)
        
        
        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 40, frame.minY + 40, 40, 55)
        let cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 74.14, frame.minY + 45.15))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 74.14, frame.minY + 69.99), controlPoint1: CGPointMake(frame.minX + 81.95, frame.minY + 52.01), controlPoint2: CGPointMake(frame.minX + 81.95, frame.minY + 63.13))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 70, frame.minY + 72.78), controlPoint1: CGPointMake(frame.minX + 72.88, frame.minY + 71.1), controlPoint2: CGPointMake(frame.minX + 71.48, frame.minY + 72.03))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 70, frame.minY + 83.92), controlPoint1: CGPointMake(frame.minX + 70, frame.minY + 77.41), controlPoint2: CGPointMake(frame.minX + 69.81, frame.minY + 81.02))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 70, frame.minY + 88.31), controlPoint1: CGPointMake(frame.minX + 70.11, frame.minY + 85.58), controlPoint2: CGPointMake(frame.minX + 70, frame.minY + 85.06))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 50, frame.minY + 88.31), controlPoint1: CGPointMake(frame.minX + 70, frame.minY + 97.23), controlPoint2: CGPointMake(frame.minX + 50, frame.minY + 97.23))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 50, frame.minY + 83.92), controlPoint1: CGPointMake(frame.minX + 50, frame.minY + 85.63), controlPoint2: CGPointMake(frame.minX + 50.1, frame.minY + 85.24))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 50, frame.minY + 72.78), controlPoint1: CGPointMake(frame.minX + 49.76, frame.minY + 80.84), controlPoint2: CGPointMake(frame.minX + 50, frame.minY + 77.87))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 45.86, frame.minY + 69.99), controlPoint1: CGPointMake(frame.minX + 48.52, frame.minY + 72.03), controlPoint2: CGPointMake(frame.minX + 47.12, frame.minY + 71.1))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 45.86, frame.minY + 45.15), controlPoint1: CGPointMake(frame.minX + 38.05, frame.minY + 63.13), controlPoint2: CGPointMake(frame.minX + 38.05, frame.minY + 52.01))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 74.14, frame.minY + 45.15), controlPoint1: CGPointMake(frame.minX + 53.67, frame.minY + 38.28), controlPoint2: CGPointMake(frame.minX + 66.33, frame.minY + 38.28))
        cameraPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor!.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        CGContextScaleCTM(context, 1, -1)
        
        if xperiaCameraImage != nil {
            CGContextDrawTiledImage(context, CGRectMake(cameraRect.minX, -cameraRect.minY, xperiaCameraImage!.size.width, xperiaCameraImage!.size.height), xperiaCameraImage!.CGImage)
        }
        
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)
        
        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor!.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor!.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)
        
        cameraOpaqueShadow.setFill()
        cameraPath.fill()
        
        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
        
        CGContextRestoreGState(context)
        
        cameraStrokeColor.setStroke()
        cameraPath.lineWidth = 1
        cameraPath.stroke()
    }
    
    //// Generated Images
    
    class func imageOfXperiaZ1(frame: CGRect, colorOfText: UIColor, fillColor: UIColor, image: UIImage, textYscale: CGFloat, caseText: String, textSize: CGFloat, textXscale: CGFloat, backgroundImageVisible: Bool, textRectHeight: CGFloat, device: Device) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        XperiaZ.drawXperiaZ1(frame, colorOfText: colorOfText, fillColor: fillColor, image: image, textYscale: textYscale, caseText: caseText, textSize: textSize, textXscale: textXscale, backgroundImageVisible: backgroundImageVisible, textRectHeight: textRectHeight, device: device)
        let imageOfXperiaZ = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return imageOfXperiaZ!
    }
    
}
